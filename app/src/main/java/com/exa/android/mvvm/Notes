App Flow =>

App starts from main activtiy as you click create the activity request from view model to insert
this view model then tell repositoty to insert that insert data in db using dao insert method
and same way for getter method.

MVVM - Model View View Model : When we have a lot data to manage and many methods in all such scenrio
it is used it is clean architecture officially announced by google to use.
Here we separate the work between layers and each layer know whatever it needs.
There are two layers -
1.View Layer - Activity, View Model
The activity/Fragment is connected to ViewModel
2.Model Layer - Repository, DataBase, Api
The view Model to Repo, Repo follows to Api, DB

So we separate the interaction ie View layer works to render UI so it just handel the work of UI, then
how data inflates , what to include from where we retrive data is done by repository class.
What happens when we have Internet access then the repo connects the api fetch data and store it in db
from db it sends the data.
when we don't have db then directly connects db and send data

Repository =>
It comes in Model class that handles retrive and insertion of data. Not aware of View.
It is simple class that is used to connect with Api, Database. It takes DataDao and Retrofit object in
constructor and connects them. If we have Internet Connection then call Api and retrive data then store it in
db and then send data from db to view Model class else directly get from db.

------------------------------------- Repository ----------------------------------------------------------------------

Data can come from multiple sources, like a network request, a local database, or from a file on the device.An app may even have more than one source of data.
Repository is nothing but a extra layer (class). By separating layer from the UI code, you can make changes in one part of the code without affecting another.
The data layer is made up of one or more repositories. Repositories themselves contain zero or more data sources.
we can use class / Interface to create repository.
reference :- https://developer.android.com/codelabs/basic-android-kotlin-compose-add-repository#2

Instead of the ViewModel directly retrieving  the data, the repository provides the data.

-----------------------------------------ListAdapter , DiffUtil-------------------------------------------------------

List Adapter is type inherited from recycle view it is used to inflate view that changes again and again.
Why List over Recycle view -
In above scenario recycle view always inflate view from scratch ie either data is alredy in the list then also
it inflate again.Basically, it inflate the provided list again either it's data is already present
In this app when a create is called a new data is added and same time want to inflate here almost data is same
just a new entry is added or in some case some of data is changed in all scenario DiffUtil is used.

DiffUtil is used with ListAdpater contains two methods used to determine that if data is already exist then
no need to inflate it again else inflate using below method:
1. areItemsthesame - it checks that the oldList data and new List data id is same
2.areContentSame - it is used to check the content of list between old and new list

--------------------------------------------------- RoomDatabase.callback() -----------------------------------------------

One of the main task that is usually performed in any application while creating database is to run few scripts to setup the database. Also, certain scripts need to
be run every time database is opened.

* constructor :- callback()

* Methods :-
  1. onCreate(db : SupportSQLiteDatabase) :- Called when the database is created for the first time.
  2. onOpen(db : SupportSQLiteDatabase) :- Called when the database has been opened.

Note :- To delete all content and repopulate the database whenever the app is created, you'll create a RoomDatabase.Callback and override onCreate().
        Because you cannot do Room database operations on the UI thread, onCreate() launches a coroutine on the IO Dispatcher.